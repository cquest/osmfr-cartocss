name: OpenStreetMap France
description: ''
attribution: 'CC-BY-SA OSM-FR/cquest'
scale: 1
metatile: 8
bounds: &world
  - -180
  - -85
  - 180
  - 85
center:
  - 2.35
  - 48.8
  - 17
format: 'png:t=0'
interactivity: false
minzoom: 0
maxzoom: 20
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

_parts:
  # default values used by layers
  extents: &extents
    extent: *world
    srs-name: "3857"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
    class: ''
    status: 'on'
    cache-features: 'on'

  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"

  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "osm"
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
    host: osmdb
    port: 5432
    user: fr
    password: m4d31nfr4nc3
    asynchronous_request: false
    max_async_connection: 1

Stylesheet:
  - "style.mss"
  - "shapefiles.mss"
  - "landcover.mss"
  - "water.mss"
  - "water-features.mss"
  - "power.mss"
  - "citywalls.mss"
  - "placenames.mss"
  - "buildings.mss"
  - "stations.mss"
  - "amenity-points.mss"
  - "ferry-routes.mss"
  - "aerialways.mss"
  - "admin.mss"
  - "addressing.mss"
  - "sports.mss"
  - "roads.mss"
  - "other.mss"

Layer:
  - id: world
    <<: *extents
    geometry: polygon
    Datasource:
      file: data/simplified-water-polygons-split-3857/simplified_water_polygons.shp
      type: shape


  - id: coast-poly
    <<: *extents
    geometry: polygon
    Datasource:
      file: data/water-polygons-split-3857/water_polygons.shp
      type: shape


  - id: lowzoom
    zoom_max: 7
    geometry: raster
    extent: *world
    Datasource:
      file: layers/z7.tif
      type: gdal


  - id: landcover
    <<: *extents
    zoom_min: 8
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* landcover */ (
          SELECT  ST_Snaptogrid(way,!pixel_width!/4) as way,
            wood,
            coalesce (aeroway, amenity, wetland, landuse, leisure, military,
            "natural", power, tourism, highway, man_made, building) as feature
          FROM (
            SELECT way,coalesce(tags->'leaf_type',wood) as wood,
              ('aeroway_' || (case when aeroway in ('apron', 'aerodrome') then aeroway else null end)) as aeroway,
              ('amenity_' || (case when amenity in ('parking', 'university', 'college', 'school', 'hospital','clinic', 'kindergarten', 'grave_yard','recycling','place_of_worship', 'public_building', 'townhall', 'courthouse', 'police', 'post_office', 'theatre','community_centre','social_facility') then amenity else null end)) as amenity,
              ('wetland_' || (case when wetland in ('marsh','bog','reedbed','swamp','saltmarsh','mangrove','tidalflat','saltern','wet_meadow') then wetland else null end)) as wetland,
              ('landuse_' || (case when landuse in ('quarry', 'vineyard', 'orchard', 'cemetery', 'grave_yard', 'residential', 'garages', 'field', 'meadow', 'grass', 'allotments', 'forest', 'farmyard', 'farm', 'farmyard','farmland', 'recreation_ground', 'conservation', 'village_green', 'retail', 'industrial', 'railway', 'commercial', 'brownfield', 'landfill', 'greenfield', 'construction', 'wood', 'school', 'harbour', 'salt_pond','greenhouse_horticulture') then landuse else null end)) as landuse,
              ('leisure_' || (case when leisure in ('swimming_pool', 'playground', 'park', 'recreation_ground', 'common', 'garden', 'golf_course') then leisure else null end)) as leisure,
              ('military_' || (case when military in ('barracks', 'danger_area') then military else null end)) as military,
              ('natural_' || (case when "natural" in ('beach','desert','heath','mud','grassland','wood','sand','scrub','marsh','bare_rock') then "natural" else null end)) as "natural",
              ('power_' || (case when power in ('station','sub_station','generator','substation','plant') then power else null end)) as power,
              ('tourism_' || (case when  tourism in ('attraction', 'camp_site', 'caravan_site', 'picnic_site', 'zoo', 'museum') then tourism else null end)) as tourism,
              ('highway_' || (case when highway in ('services', 'rest_area') then highway else null end)) as highway,
              ('man_made_' || (case when man_made is not null then man_made else null end)) as man_made,
              ('building_' || (case when building in ('civic','public') then building else null end)) as building
            FROM planet_osm_polygon
            WHERE  (landuse is not null
                OR wetland is not null
                OR leisure is not null
                OR aeroway in ('apron','aerodrome')
                OR amenity in ('parking', 'university', 'college', 'school', 'hospital','clinic', 'kindergarten', 'grave_yard','recycling','place_of_worship', 'public_building', 'townhall', 'courthouse', 'police', 'post_office', 'theatre','community_centre','social_facility')
                OR military in ('barracks','danger_area')
                OR "natural" in ('beach','desert','heath','mud','grassland','wood','sand','scrub','marsh','bare_rock')
                OR power in ('station','sub_station','generator','substation','plant')
                OR tourism in ('attraction','camp_site','caravan_site','picnic_site','zoo','museum')
                OR highway in ('services','rest_area')
                OR man_made in ('wastewater_plant','clearcut','gasometer','reservoir_covered','water_works','works')
                OR building in ('civic','public')
              )
              AND (coalesce(landuse, wetland, leisure, aeroway, amenity, military, power, "natural", tourism, highway, man_made) is not null
                OR building in ('civic','public')
              )
              and way && !bbox!
              and way_area > !pixel_width!*!pixel_height!*10
            ORDER BY z_order,way_area desc) as landcover ) as features

  - id: landcover-line
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* landcover-line */ (
          SELECT way FROM planet_osm_line WHERE man_made='cutline'
        ) as landcover
      simplify_geometries: 'true'


  - id: tracks-tunnels
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* tracks-tunnels */ (
          select way,tracktype
          from planet_osm_line
          where highway='track'
            AND ST_Length(way) > !pixel_width! * 4
            AND coalesce(tunnel,covered) in ('yes','true','1')
        ) as tracks
      simplify_geometries: 'true'


  - id: footbikecycle-tunnels
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* footbikecycle-tunnels */ (
          select way,highway,toll,horse,foot,bicycle,junction,coalesce(tags->'footway','') as footway
          from planet_osm_line
          where highway in ('bridleway','footway','cycleway','path')
            and coalesce(tunnel,covered) in ('yes','true','1')
            AND ST_Length(way) > !pixel_width! * 4
          order by z_order
        ) as roads
      simplify_geometries: 'true'


  - id: minor-roads-fill-tunnels
    <<: *extents
    zoom_min: 12
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* minor-roads-fill-tunnels */ (
          SELECT way,
            oneway,
            junction,
            toll,
            coalesce(highway,aeroway) as highway,
            horse,
            bicycle,
            foot,
            construction,
            coalesce(tags->'footway','') as footway,
            case when coalesce(tunnel,covered) in ('yes','true','1') then 'yes'::text else 'no'::text end as tunnel,
            case when bridge in ('yes','true','1','viaduct') then 'yes'::text else 'no'::text end as bridge,
            case when railway in ('spur','siding') or (railway='rail' and service in ('spur','siding','yard')) then 'spur-siding-yard'::text else railway end as railway,
            case when service in ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else 'INT-normal'::text end as service,
            tracktype,
            case  when (z_order<10 and z_order>3 and highway in ('motorway_link','trunk_link','primary_link','secondary_link','tertiary_link')) then 4+(z_order/10)  when (z_order<10 and z_order>3 and highway='tertiary') then 5 else z_order end as zz_order
          FROM planet_osm_line
          WHERE way && !bbox!
            AND ST_Length(way) > !pixel_width! * 8
            AND (highway is not null
              or aeroway in ('runway','taxiway','taxipath','parking_position')
              or railway in ('light_rail','narrow_gauge','funicular','rail','subway','tram','spur','siding','platform','disused','abandoned','construction','miniature','turntable'))
            and coalesce(tunnel,covered,'') in ('yes','true','1')
            and route is null
          ORDER BY zz_order) as roads
      simplify_geometries: 'true'


  - id: tunnels
    <<: *extents
    zoom_min: 12
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* tunnels */ (
        SELECT ST_Snaptogrid(way,!pixel_width!/4) as way, highway, junction, toll
        FROM planet_osm_line
        WHERE way && !bbox!
          AND ST_Length(way) > !pixel_width! * 4
          AND highway in ('motorway','motorway_link','trunk','trunk_link','primary','primary_link','secondary','secondary_link','tertiary','tertiary_link','residential','unclassified')
          AND coalesce(tunnel,covered) in ('yes','true','1')
        ORDER BY z_order) as tunnels
      simplify_geometries: 'true'


  - id: direction-tunnels
    class: directions
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* direction-tunnels */ (
        SELECT '-1' as oneway, junction, case when coalesce(tunnel,covered) in ('yes','true','1') then 'yes'::text else 'no'::text end as tunnel, coalesce(tags->'footway','') as footway, ST_Snaptogrid(case when oneway in ('yes','true','1') or junction='roundabout' then ST_Reverse(way) else way end,!pixel_width!/4) as way
        FROM planet_osm_line
        WHERE way && !bbox!
          AND ST_Length(way) > !pixel_width! * 8
          AND ((oneway is not null and oneway not in ('no','false','0')) or (junction='roundabout'))
          AND (highway is not null or railway is not null or waterway is not null) AND (bridge is null or bridge not in ('yes','true','1','viaduct'))
          AND z_order<0) as directions
      simplify_geometries: 'true'


  - id: water-lines-low-zoom
    <<: *extents
    properties:
      minzoom: 8
      maxzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* water-lines-low-zoom */ (
        SELECT way,
          waterway
        FROM planet_osm_line
        WHERE waterway in ('river','canal','dam')
          AND ST_Length(way) > !pixel_width!
          AND osm_id>0
        ) as water_lines_lz
      simplify_geometries: 'true'


  - id: water-areas
    <<: *extents
    properties:
      minzoom: 8
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* water-areas */ (
        SELECT ST_Snaptogrid(way,!pixel_width!/4) as way,
          "natural",
          waterway,
          landuse,
          amenity,
          coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
          tags->'basin' as basin,
          water,
          surface
        FROM planet_osm_polygon
        WHERE (waterway in ('dock','mill_pond','riverbank','canal','dam')
            or landuse in ('reservoir','water','basin','salt_pond')
            or "natural" in ('lake','water','land','glacier','mud')
            or amenity='fountain'
            or water='tidal'
            or tags->'tidal'='yes')
          and building is null
          and way_area > !pixel_width!*!pixel_height!*10
          and way && !bbox!
        ORDER BY z_order,way_area desc
        ) as water_areas


  - id: glaciers-text
    <<: *extents
    zoom_min: 8
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* glaciers-text */ (
        SELECT way,
          coalesce(tags->'name:fr',tags->'int_name',name) as name,
          way_area
        FROM planet_osm_polygon
        WHERE "natural"='glacier'
          AND building is null
          AND way_area > !pixel_width!*!pixel_height!*100
        ORDER BY way_area desc
        ) as glaciers
      simplify_geometries: 'true'


  - id: water-lines
    <<: *extents
    properties:
      minzoom: 15
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* water-lines */ (
          SELECT way,
            waterway,
            disused,
            lock,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            case when coalesce(tunnel,covered) in ('yes','true','1') then 'yes'::text else coalesce(tunnel,covered) end as tunnel,
            tags->'CEMT' as cemt,
            case when tags->'CEMT'~'V' then 'true' else '' end as cemt_large,
            case when tags->'motorboat'='yes' then 'motorboat' when tags->'boat'='yes' then 'boat' else 'no' end as boat
          FROM planet_osm_line
          WHERE way && !bbox!
            AND osm_id>0
            AND waterway in ('weir','river','canal','derelict_canal','stream','drain','ditch','wadi')
            AND (bridge is null
              OR bridge not in ('yes','true','1','aqueduct'))
          ORDER BY z_order
        ) as water_lines
      simplify_geometries: 'true'


  - id: marinas-area
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* marinas-area */ (select way from planet_osm_polygon where leisure ='marina' and way_area > !pixel_width!*!pixel_height!*10 ) as marinas"
      simplify_geometries: 'true'


  - id: piers-area
    <<: *extents
    zoom_min: 12
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* piers-area */ (
          select way,
            man_made
          from planet_osm_polygon
          where man_made in ('pier','breakwater','groyne')
            and way_area > !pixel_width!*!pixel_height!*10
        ) as piers_area


  - id: piers
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* piers */ (
          select way,
            man_made
          from planet_osm_line
          where man_made in ('pier','breakwater','groyne')
            AND ST_Length(way) > !pixel_width!) as piers


  - id: locks
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: " /* locks */ (select way,waterway from planet_osm_point where waterway='lock_gate') as locks"


  - id: sports-grounds
    <<: *extents
    zoom_min: 10
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* sports-grounds */ (
          select way,
            leisure,
            case when leisure='pitch' then 2 when leisure='track' then 1 else 0 end as prio
          from planet_osm_polygon
          where leisure in ('sports_centre','stadium','pitch','track')
            and way_area > !pixel_width!*!pixel_height!*10
          order by z_order,prio,way_area desc
        ) as sports_grounds
      simplify_geometries: 'true'


  - id: sports
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* sports */ (
        SELECT *,
          abs(a12-a23) as angle_diff,
          (a12+a23+90)/2+90 as angle
        FROM (
          SELECT *,
            st_npoints(way2) as nb,
            ST_Distance(st_pointn(way2,1),st_pointn(way2,2)) as d12,
            ST_Distance(st_pointn(way2,3),st_pointn(way2,2)) as d23,
            ST_Distance(st_pointn(way2,1),st_pointn(way2,3)) as d13,
            degrees(st_azimuth(st_pointn(way2,1),st_pointn(way2,2))) as a12,
            degrees(st_azimuth(st_pointn(way2,2),st_pointn(way2,3))) as a23
          FROM (
            SELECT *,
              st_area(way) as way_area,
              ST_ExteriorRing(ST_SimplifyPreserveTopology(way,100)) as way2
            FROM (
              SELECT (st_dump(way)).geom as way,
                sport,
                surface,
                access
              FROM planet_osm_polygon
              WHERE leisure='pitch'
                AND sport is not null
                AND way && !bbox!
                AND way_area > !pixel_width!*!pixel_height!*10
              ) as dump
            ) as simplified
          ) as simplified2
        ) as sports


  - id: golf
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* golf */ (select way, geo, golf, ref, name, case when golf='rough' then 5 when golf='fairway' then 10  when golf='green' then 20  when golf='bunker' then 30 when golf in ('water_hazard','lateral_water_hazard') then 35 else 40 end as prio from (select way,tags->'golf' as golf, name, ref, way_area, 'polygon' as geo from planet_osm_polygon where tags ? 'golf' AND way && !bbox!  and way_area > !pixel_width!*!pixel_height!*10 UNION select p.way,p.tags->'golf' as golf, p.name, coalesce(p.ref,l.ref) as ref, 0 as way_area, 'point' as geo from planet_osm_point p LEFT JOIN planet_osm_line l ON (l.way && !bbox! AND ST_Intersects(p.way, l.way) AND l.tags ? 'golf') where p.tags ? 'golf' AND p.way && !bbox! UNION select way,tags->'golf' as golf, name, ref, 0 as way_area, 'line' as geo from planet_osm_line where tags ? 'golf' AND way && !bbox!) as golf order by prio) as golf"


  - id: ski
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* ski */ (select way, tags->'piste:type' as ski_type, tags->'piste:difficulty' as ski_difficulty, ref, name from planet_osm_line where tags ? 'piste:difficulty') as ski"


  - id: citywalls
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* citywalls */ (select way, historic from planet_osm_line where historic in ('citywalls','castle_walls') UNION select way,historic from planet_osm_polygon where historic='castle_walls') as citywalls"


  - id: landuse-overlay
    <<: *extents
    zoom_min: 10
    Datasource:
      <<: *osm2pgsql
      table: " /* landuse-overlay */ (select way,landuse,leisure,amenity,\"natural\" from planet_osm_polygon where (landuse = 'military' or leisure='nature_reserve' or amenity='prison' or \"natural\" in ('wetland','marsh')) and building is null  and way_area > !pixel_width!*!pixel_height!*10 ) as landuse_overlay"
      simplify_geometries: 'true'


  - id: turning-circle-casing
    <<: *extents
    zoom_min: 15
    Datasource:
      <<: *osm2pgsql
      table: " /* turning-circle-fill/casing */ (select p.way, substring(max(prio),3) as int_tc_type, max(prio) from planet_osm_point p join planet_osm_line l on (l.way && !bbox! AND st_dwithin(l.way, p.way,0.1)) join (values ('tertiary','1_tertiary'), ('unclassified','2_unclassified'), ('residential','3_residential'), ('living_street','4_living_street'), ('service','5_service') ) as v (highway,prio) on v.highway=l.highway where l.highway is not null and p.highway in ('turning_circle','turning_loop') and p.way && !bbox! group by p.way order by 3) as turning_circles_casing"


  - id: cliffs
    <<: *extents
    properties:
      minzoom: 15
    Datasource:
      <<: *osm2pgsql
      table: " /* cliffs */ (select way,\"natural\",man_made, junction from planet_osm_line where \"natural\" = 'cliff' or man_made = 'embankment') as roads"


  - id: area-barriers
    class: barriers
    <<: *extents
    properties:
      minzoom: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* area-barriers */ (select way,barrier,\"natural\" from planet_osm_polygon where barrier is not null or \"natural\"='hedge') as barriers"


  - id: highway-area-casing
    <<: *extents
    properties:
      minzoom: 15
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* highway-area-casing */ (
          SELECT way,
            highway,
            railway,
            toll,
            coalesce(tags->'footway','') as footway,
            case when coalesce(tunnel,covered) in ('yes','true','1') then 'yes'::text else 'no'::text end as tunnel,
            junction
          FROM planet_osm_polygon
          WHERE (highway in ('residential','unclassified','pedestrian','service','footway','track','path','platform','cycleway')
            OR railway='platform')
            AND way_area > !pixel_width! * !pixel_height! * 16
          ORDER BY z_order,way_area DESC
        ) as highway_area_casing
      simplify_geometries: 'true'


  - id: highway-area-fill
    <<: *extents
    properties:
      minzoom: 15
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* highway-area-fill */ (
          select way,
            highway,
            junction,
            toll,
            railway,
            aeroway,
            coalesce(tags->'footway','') as footway,
            case when coalesce(tunnel,covered) in ('yes','true','1') then 'yes'::text else 'no'::text end as tunnel
             /* ,case when highway in ('motorway','motorway_link') then '1' when highway in ('trunk','trunk_link') then '2' when highway in ('primary','primary_link') then '3' when highway in ('secondary','secondary_link') then '4' when highway in ('tertiary','tertiary_link') then '5' when highway in ('residential','unclassified') then '6' else '7' end as prio */
          from planet_osm_polygon
          where (highway in ('residential','unclassified','pedestrian','service','footway','living_street','track','path','platform','services','cycleway')
            or railway='platform'
            or aeroway in ('runway','taxiway','helipad','taxipath','parking_position'))
            AND way_area > !pixel_width! * !pixel_height! * 16
          order by z_order, way_area desc
        ) as roads
      simplify_geometries: 'true'


  - id: line-barriers
    class: barriers
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* line-barriers */ (select way, barrier, junction from planet_osm_line where barrier is not null) as roads"


  - id: buildings
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* buildings */ (
        SELECT ST_Simplify(way,!pixel_width!/4) as way, tags->'heritage' as heritage,
          coalesce(aeroway, case when building in ('residential','house','garage','garages','detached','terrace','apartments') then 'INT-light'::text else building end) as building,
          tags->'wall' as wall
        FROM planet_osm_polygon
        WHERE ((building is not null and building not in ('no','train_station','station','supermarket','planned','civic','public') and (railway is null or railway != 'station') and (amenity is null or amenity not in ('place_of_worship', 'public_building','townhall','courthouse','police','post_office','theatre','community_centre','social_facility')))  or aeroway = 'terminal')
          AND way_area < 2000000
          AND way_area > !pixel_width!*!pixel_height!*2
          AND way && !bbox!
        ORDER BY z_order,way_area desc
        ) as buildings


  - id: indoor
    <<: *extents
    zoom_min: 18
    Datasource:
      <<: *osm2pgsql
      table: " /* indoor */ (select way  from planet_osm_polygon  where tags->'room'='yes' or tags->'indoor'='yes') as indoor"


  - id: tracks-notunnel-nobridge
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* tracks-notunnel-nobridge */ (select way,tracktype from planet_osm_line where highway='track' and (bridge is null or bridge in ('no','false','0')) and (tunnel is null or tunnel in ('no','false','0'))) as tracks"
      simplify_geometries: 'true'


  - id: minor-roads
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* minor-roads */ (
          SELECT way,
            construction,
            junction,
            toll,
            horse,
            foot,
            bicycle,
            access,
            tracktype,
            coalesce(highway, aeroway) as highway,
            tags->'level' as level,
            case when service in ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else 'INT-normal'::text end as service,
            case when railway in ('spur','siding') or (railway='rail' and service in ('spur','siding','yard')) then 'spur-siding-yard'::text else railway end as railway,
            coalesce(tags->'footway', '') as footway,
            case when bridge in ('yes','true','1','viaduct') then 'yes'::text else 'no'::text end as bridge,
            case when (z_order<10 and z_order>3 and highway in ('motorway_link','trunk_link','primary_link','secondary_link','tertiary_link')) then 4+(z_order/10)
              when (z_order<10 and z_order>3 and highway='tertiary') then 5
              else z_order end as zz_order
        FROM planet_osm_line
        WHERE coalesce(tunnel,covered,'') not in ('yes','true','1')
          AND (highway is not null
            OR aeroway in ('runway','taxiway','taxipath','parking_position')
            OR railway in ('light_rail','narrow_gauge','funicular','rail','subway','tram','spur','siding','platform','disused','abandoned','construction','miniature','turntable'))
          AND route is null
          AND ST_Length(way) > !pixel_width!*2
        ORDER BY zz_order) as roads
      simplify_geometries: 'true'


  - id: turning-circle-fill
    <<: *extents
    zoom_min: 15
    Datasource:
      <<: *osm2pgsql
      table: " /* turning-circle-fill/casing */ (select p.way, substring(max(prio),3) as int_tc_type, max(prio) from planet_osm_point p join planet_osm_line l on (l.way && !bbox! AND st_dwithin(l.way, p.way,0.1)) join (values ('tertiary','1_tertiary'), ('unclassified','2_unclassified'), ('residential','3_residential'), ('living_street','4_living_street'), ('service','5_service') ) as v (highway,prio) on v.highway=l.highway where l.highway is not null and p.highway in ('turning_circle','turning_loop') and p.way && !bbox! group by p.way order by 3) as turning_circle_fill"


  - id: ferry-routes
    <<: *extents
    zoom_min: 8
    Datasource:
      <<: *osm2pgsql
      table: " /* ferry-routes */ (select way from planet_osm_line where route='ferry' ) as routes"
      simplify_geometries: 'true'


  - id: aerialways
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* aerialways */ (select way,aerialway,name from planet_osm_line where aerialway is not null) as aerialways"
      simplify_geometries: 'true'


  - id: roads
    <<: *extents
    zoom_min: 8
    zoom_max: 12
    Datasource:
      <<: *osm2pgsql
      table: " /* roads */ (SELECT way,highway,junction,toll, case when railway='preserved' and service in ('spur','siding','yard') then 'INT-preserved-ssy'::text else railway end as railway  FROM  planet_osm_roads  WHERE  coalesce(tunnel,covered,'') not in ('yes','true','1') AND (highway is not null or (railway is not null and railway!='preserved' and (service is null or service not in ('spur','siding','yard'))) or railway='preserved') ORDER BY z_order) as roads"
      simplify_geometries: 'true'


  - id: trees
    <<: *extents
    properties:
      minzoom: 17
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* trees */ (
          SELECT way,
            'tree' as type
          FROM planet_osm_point
          WHERE "natural"='tree'
            AND !scale_denominator!<5000
          UNION
          SELECT way,
            'tree_row' as type
          FROM planet_osm_line
          WHERE "natural"='tree_row'
        ) as trees


  - id: access-pre-bridges
    class: access
    <<: *extents
    zoom_min: 15
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* access-pre-bridges */ (
          select way,
            access,
            highway,
            coalesce(tags->'footway','') as footway,
            case when service in ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else 'INT-normal'::text end as service
          from planet_osm_line
          where access is not null
            and highway is not null
            and (bridge is null or bridge not in ('yes','true','1','viaduct'))
            AND ST_length(way) > !pixel_width! * 8
        ) as access
      simplify_geometries: 'true'


  - id: direction-pre-bridges
    class: directions
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* direction-pre-bridges */ (select '-1' as oneway, junction, case when coalesce(tunnel,covered) in ('yes','true','1') then 'yes'::text else 'no'::text end as tunnel, coalesce(tags->'footway','') as footway, case when oneway in ('yes','true','1') or junction='roundabout' then ST_Reverse(way) else way end as way from planet_osm_line  where way && !bbox! and ((oneway is not null and oneway not in ('no','false','0')) or (junction='roundabout')) and (highway is not null or railway is not null or waterway is not null)  and (bridge is null or bridge not in ('yes','true','1','viaduct')) AND z_order>=0) as directions"
      simplify_geometries: 'true'


  - id: bridges-poly
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* bridges-poly */ (select way from planet_osm_polygon where man_made='bridge'  and way_area > !pixel_width!*!pixel_height!*10 order by z_order) as bridge_poly"
      simplify_geometries: 'true'


  - id: waterway-bridges
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* waterway-bridges */ (select way,coalesce(tags->'name:fr',tags->'int_name',name) as name from planet_osm_line where waterway='canal' and bridge in ('yes','true','1','aqueduct') order by z_order) as water"
      simplify_geometries: 'true'


  - id: bridges-l0
    class: bridges
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* layer0 */ (
        SELECT  case when oneway in ('yes','true','1') then ST_Reverse(way) else way end as way,
                case when oneway is not null then '-1'  else '' end as oneway,
                access,
                CASE WHEN bridge in ('yes','true','1','viaduct') then 'yes' else 'no' END as bridge,
                CASE WHEN tunnel in ('yes','true','1') then 'yes' else 'no' END as tunnel,
                junction, toll, coalesce(highway,aeroway) as highway, horse, bicycle, foot, tracktype,
                coalesce(tags->'footway','') as footway,
                case when railway in ('spur','siding') or (railway='rail' and service in ('spur','siding','yard')) then 'INT-spur-siding-yard'::text else railway end as railway,
                case when service in ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else 'INT-normal'::text end as service
        FROM planet_osm_line
        WHERE way && !bbox! AND ST_length(way) > !pixel_width!*8
          AND bridge in ('yes','true','1','viaduct')
          AND (layer is null or layer ='0')
          AND (highway is not null or aeroway in ('runway','taxiway','taxipath','parking_position')
            OR railway in('light_rail','subway','narrow_gauge','rail','spur','siding','disused','abandoned','construction')
            OR waterway is not null)
          ORDER BY z_order
        ) as layer0
      simplify_geometries: 'true'


  - id: bridges-l1
    class: bridges
    <<: *extents
    properties:
      minzoom: 12
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* layer1 */ (SELECT case when oneway in ('yes','true','1') then
        ST_Reverse(way) else way end as way, case when oneway is not null then
        '-1' else '' end as oneway, access, CASE WHEN bridge in
        ('yes','true','1','viaduct') then 'yes' else 'no' END as bridge, CASE
        WHEN tunnel in ('yes','true','1') then 'yes' else 'no' END as tunnel,
        junction,toll,coalesce(highway,aeroway) as highway, horse, bicycle,
        foot, tracktype, coalesce(tags->'footway','') as footway, case when
        railway in ('spur','siding') or (railway='rail' and service in
        ('spur','siding','yard')) then 'INT-spur-siding-yard'::text else railway
        end as railway,  case when service in
        ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else
        'INT-normal'::text end as service  FROM planet_osm_line  WHERE way &&
        !bbox!  AND ST_length(way) > !pixel_width!*8 AND bridge in ('yes','true','1','viaduct')  AND layer ='1'  AND
        (highway is not null or aeroway in
        ('runway','taxiway','taxipath','parking_position') or railway in
        ('light_rail','subway','narrow_gauge','rail','spur','siding','disused','abandoned','construction')
        or waterway is not null)  ORDER BY z_order) as layer1
      simplify_geometries: 'true'


  - id: bridges-l2
    class: bridges
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* layer2 */ (SELECT case when oneway in ('yes','true','1') then
        ST_Reverse(way) else way end as way,case when oneway is not null then
        '-1' else '' end as oneway, access, CASE WHEN bridge in
        ('yes','true','1','viaduct') then 'yes' else 'no' END as bridge, CASE
        WHEN tunnel in ('yes','true','1') then 'yes' else 'no' END as tunnel,
        junction,toll,coalesce(highway,aeroway) as highway, horse, bicycle,
        foot, tracktype, coalesce(tags->'footway','') as footway, case when
        railway in ('spur','siding') or (railway='rail' and service in
        ('spur','siding','yard')) then 'INT-spur-siding-yard'::text else railway
        end as railway,  case when service in
        ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else
        'INT-normal'::text end as service  FROM planet_osm_line  WHERE way &&
        !bbox!  AND ST_length(way) > !pixel_width!*8 AND bridge in ('yes','true','1','viaduct')  AND layer ='2'  AND
        (highway is not null or aeroway in
        ('runway','taxiway','taxipath','parking_position') or railway in
        ('light_rail','subway','narrow_gauge','rail','spur','siding','disused','abandoned','construction')
        or waterway is not null)  ORDER BY z_order) as layer2
      simplify_geometries: 'true'


  - id: bridges-l3
    class: bridges
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* layer3 */ (SELECT case when oneway in ('yes','true','1') then
        ST_Reverse(way) else way end as way, case when oneway is not null then
        '-1' else '' end as oneway, access, CASE WHEN bridge in
        ('yes','true','1','viaduct') then 'yes' else 'no' END as bridge, CASE
        WHEN tunnel in ('yes','true','1') then 'yes' else 'no' END as tunnel,
        junction,toll,coalesce(highway,aeroway) as highway, horse, bicycle,
        foot, tracktype, coalesce(tags->'footway','') as footway, case when
        railway in ('spur','siding') or (railway='rail' and service in
        ('spur','siding','yard')) then 'INT-spur-siding-yard'::text else railway
        end as railway,  case when service in
        ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else
        'INT-normal'::text end as service  FROM planet_osm_line  WHERE way &&
        !bbox!  AND ST_length(way) > !pixel_width!*8 AND bridge in ('yes','true','1','viaduct')  AND layer ='3'  AND
        (highway is not null or aeroway in
        ('runway','taxiway','taxipath','parking_position') or railway in
        ('light_rail','subway','narrow_gauge','rail','spur','siding','disused','abandoned','construction')
        or waterway is not null)  ORDER BY z_order) as layer3
      simplify_geometries: 'true'


  - id: bridges-l4
    class: bridges
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* layer4 */ (SELECT case when oneway in ('yes','true','1') then
        ST_Reverse(way) else way end as way, case when oneway is not null then
        '-1' else '' end as oneway, access, CASE WHEN bridge in
        ('yes','true','1','viaduct') then 'yes' else 'no' END as bridge, CASE
        WHEN tunnel in ('yes','true','1') then 'yes' else 'no' END as tunnel,
        junction,toll,coalesce(highway,aeroway) as highway, horse, bicycle,
        foot, tracktype, coalesce(tags->'footway','') as footway, case when
        railway in ('spur','siding') or (railway='rail' and service in
        ('spur','siding','yard')) then 'INT-spur-siding-yard'::text else railway
        end as railway,  case when service in
        ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else
        'INT-normal'::text end as service  FROM planet_osm_line  WHERE way &&
        !bbox!  AND ST_length(way) > !pixel_width!*8 AND bridge in ('yes','true','1','viaduct')  AND layer ='4'  AND
        (highway is not null or aeroway in
        ('runway','taxiway','taxipath','parking_position') or railway in
        ('light_rail','subway','narrow_gauge','rail','spur','siding','disused','abandoned','construction')
        or waterway is not null)  ORDER BY z_order) as layer4
      simplify_geometries: 'true'


  - id: bridges-l5
    class: bridges
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* layer5 */ (SELECT case when oneway in ('yes','true','1') then
        ST_Reverse(way) else way end as way, case when oneway is not null then
        '-1' else '' end as oneway, access, CASE WHEN bridge in
        ('yes','true','1','viaduct') then 'yes' else 'no' END as bridge, CASE
        WHEN tunnel in ('yes','true','1') then 'yes' else 'no' END as tunnel,
        junction,toll,coalesce(highway,aeroway) as highway, horse, bicycle,
        foot, tracktype, coalesce(tags->'footway','') as footway, case when
        railway in ('spur','siding') or (railway='rail' and service in
        ('spur','siding','yard')) then 'INT-spur-siding-yard'::text else railway
        end as railway,  case when service in
        ('parking_aisle','drive-through','driveway') then 'INT-minor'::text else
        'INT-normal'::text end as service  FROM planet_osm_line  WHERE way &&
        !bbox!  AND ST_length(way) > !pixel_width!*8 AND bridge in ('yes','true','1','viaduct')  AND layer ='5'  AND
        (highway is not null or aeroway in
        ('runway','taxiway','taxipath','parking_position') or railway in
        ('light_rail','subway','narrow_gauge','rail','spur','siding','disused','abandoned','construction')
        or waterway is not null)  ORDER BY z_order) as layer5
      simplify_geometries: 'true'


  - id: highway_crossings
    <<: *extents
    zoom_min: 19
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* highway_crossings */ (
        SELECT osm_id,
          tactile_paving,
          crossing_bollard,
          wheelchair,
          ST_GeometryN(st_union(way),1) as way,
          max(angle)-min(angle) as angle_diff,
          avg(angle) as angle
        FROM (
          SELECT p.osm_id, tactile_paving, crossing_bollard, wheelchair, p.way as way,
            cast(90+degrees(ST_Azimuth(st_lineinterpolatepoint(way1,0),st_lineinterpolatepoint(way1,1))) as integer) % 180 as angle
          FROM (
            SELECT * FROM (
              SELECT p.osm_id, p.way, ST_LineMerge(ST_Intersection(st_buffer(p.way,0.1), h.way)) as way1,
                p.tags->'tactile_paving' as tactile_paving, p.tags->'crossing:bollard' as crossing_bollard,
                coalesce(p.tags->'wheelchair',p.tags->'sloped_curb') as wheelchair
              FROM planet_osm_point as p
              JOIN planet_osm_line h
                ON (h.way && !bbox! AND st_intersects(p.way,h.way) and h.highway is not null and h.highway not in ('footway','cycleway','path','pedestrian','steps','service'))
              WHERE (p.highway='crossing' or p.tags ? 'crossing') and p.way && !bbox! and h.way && !bbox!
            ) as p
            WHERE ST_GeometryType(way1)='ST_LineString') as p) as crossing
            GROUP BY osm_id, tactile_paving, crossing_bollard, wheelchair
          ) as highway_crossings


  - id: trams_guideways
    <<: *extents
    zoom_min: 13
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* trams */ (
          select way,
            coalesce(railway,highway) as type,
            bridge
          from planet_osm_line
          where (railway='tram' or highway='bus_guideway')
            and (tunnel is null and covered is null or coalesce(tunnel,covered,'') not in ('yes','true','1','building_passage'))
        ) as trams
      simplify_geometries: 'true'


  - id: admin-lz
    <<: *extents
    zoom_min: 4
    zoom_max: 10
    Datasource:
      <<: *osm2pgsql
      table: " /* admin-lz */ (select ST_Simplify(way,!pixel_width!/4) as way, admin_level, tags->'maritime' as maritime from planet_osm_roads where way && !bbox! and boundary='administrative' and admin_level in ('1','2','3','4','5','6') and osm_id>0 and (\"natural\" is null or \"natural\" != 'coastline') order by 2 desc, maritime) as admin"


  - id: admin-boundaries
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* admin-boundaries */ (
          SELECT way,
            admin_level,
            coalesce(b.tags->'maritime','no') as maritime,
            count(r.*) as nb
          FROM planet_osm_roads b
          LEFT JOIN planet_osm_rels r ON (r.parts @> ARRAY[osm_id]
            AND r.members @> ARRAY['w' || osm_id]
            AND r.tags @> ARRAY['boundary','administrative','admin_level'])
            AND regexp_replace(r.tags::text,'[{}]',',') ~ format(',admin_level,%s,',admin_level)
          WHERE way && !bbox! AND ST_length(way) > !pixel_width! * 10
            AND boundary='administrative'
            AND admin_level is not null
            AND (to_int(admin_level) <= 6
              OR (to_int(admin_level) <= 9 AND !pixel_width! < 400)
              OR (!pixel_width! < 50))
          GROUP BY 1,2,3
          ORDER BY to_int(admin_level) desc, 4
        ) as admin_boundaries
      simplify_geometries: 'true'


  - id: placenames-capital
    class: placenames
    <<: *extents
    zoom_min: 4
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* placenames-capital */ (
          SELECT ST_Snaptogrid(way,!pixel_width!) as way,
            place,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(tags->'short_name:fr', tags->'name:fr', tags->'int_name', name)) as nom,
            to_int(population) as pop,
            coalesce(tags->'is_capital',
              (case when coalesce(admin_level, capital)='2' then 'country'
                when tags->'importance'='international' then 'state'
                when coalesce(admin_level, capital)='4' then 'state'
                when tags->'importance'='national' then 'state'
                else null end)
            ) as is_capital,
            array_length(hstore_to_array(tags),1)/2 as nbtags
          FROM planet_osm_point
          WHERE  way && !bbox!
            and place is not null
            and (capital is not null or tags ? 'is_capital')
            and (capital is not null or tags ? 'is_capital')
            and place in ('city','town')
            and (tags->'is_capital' in ('country','state')
              or capital in ('2','3','4','5','6','7')
              or (capital='yes' and admin_level in ('2','3','4','5','6','7'))
              or tags->'importance' in ('international','national')
              or array_length(hstore_to_array(tags),1)/2>20)
          order by is_capital, coalesce(admin_level, capital,'9'), place, pop desc
        ) as placenames


  - id: placenames-sea
    <<: *extents
    zoom_min: 4
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* placenames-sea */ (
          SELECT way,
            way_area,
            0 as sqkm,
            coalesce(place,"natural") as place,
            way_area / (!pixel_width!*!pixel_height!) as pixels,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name
          FROM  planet_osm_polygon
          WHERE  way && !bbox!
            and way_area > !pixel_width!*!pixel_height!
            and coalesce("natural",place) in ('archipelago','island','ocean','sea','bay','strait','isthmus')
        UNION
          SELECT way,
            way_area,
            to_int(coalesce(tags->'sqkm','0')) as sqkm,
            coalesce(place,"natural") as place,
            to_int(coalesce(tags->'sqkm','0')) / (!pixel_width!*!pixel_height!) as pixels,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name
          FROM  planet_osm_polygon
          WHERE  way && !bbox!
            and coalesce("natural",place) in ('archipelago','island','ocean','sea','bay','strait','isthmus')
        order by way_area desc, 3 desc
        ) as placenames_sea


  - id: placenames-large
    class: country state
    zoom_min: 2
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* placenames-large */ (
          SELECT ST_Snaptogrid(way,!pixel_width!) as way,
            place,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            osm_id,
            to_int(population) as pop,
            ref,
            0 as way_area
          FROM  planet_osm_point
          WHERE  way && !bbox!
            and place is not null
            and place  in ('country','state','continent')
            and NOT tags ? 'disused:admin_level'
          order by place, pop desc
        ) as placenames


  - id: placenames-medium
    class: placenames
    zoom_min: 4
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* placenames-medium */ (
          SELECT ST_Snaptogrid(way,!pixel_width!) as way,
            place,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name', tags->'name:fr',tags->'int_name', name)) as nom,
            to_int(population) as pop,
            tags->'is_capital' as is_capital,
            0 as nbtags
          FROM  planet_osm_point
          WHERE  way && !bbox!
            and place is not null
            and place in ('city','town')
          order by coalesce(admin_level, capital,'9'), place, pop desc
        ) as placenames


  - id: placenames-small
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* placenames-small */ (
          SELECT ST_Snaptogrid(way,!pixel_width!) as way,
            place,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name', tags->'name:fr',tags->'int_name', name)) as nom,
            to_int(population) as pop
          FROM  planet_osm_point
          WHERE  way && !bbox!
            and place is not null
            and place in ('suburb','neighbourhood','quater','village','large_village','hamlet','locality','isolated_dwelling','farm')
          order by pop desc
        ) as placenames


  - id: stations-poly
    class: stations
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* stations-poly */ (
          select way,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            railway,
            aerialway,
            disused,
            highway,
            amenity,
            coalesce(tags->'type:RATP','') as type_ratp,
            operator,
            '' as l_operator,
            '' as l_type,
            '' as l_ref1,
            tags->'network' as network,
            case when railway='station' then 2  when railway='halt' then 1  else 0 end as prio,
            coalesce(tags->'usage','') as usage,
            coalesce(tags->'ele',tags->'ele:local','') as ele
          from planet_osm_polygon
          where (railway is not null or aeroway is not null)
            and (railway in ('station','halt','tram_stop')
              or aerialway='station')
          order by prio desc
        ) as stations
      simplify_geometries: 'true'


  - id: stations-lz
    class: stations
    <<: *extents
    zoom_min: 11
    zoom_max: 14
    properties:
      minzoom: 11
      maxzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* stations-lz */ (
          SELECT way, name, railway, aerialway, disused, highway, amenity, type_ratp, operator, l_operator, l_type, l_ref1, network, prio, usage, ele
          FROM (
          select s.way as way,
            coalesce(s.tags->'name:fr',s.tags->'int_name',s.tags->'int_name',s.name) as name,
            s.railway as railway,
            s.aerialway as aerialway,
            s.disused as disused,
            case when s.tags->'public_transport'='platform' and s.tags->'bus'='yes' then 'bus_stop' else s.highway end as highway,
            s.amenity as amenity,
            coalesce(s.tags->'type:RATP','') as type_ratp,
            s.operator as operator,
            coalesce(l.operator,'') as l_operator,
            l.route as l_type,
            substring(l.ref,1,1) as l_ref1,
            coalesce(s.tags->'network',l.tags->'network') as network,
            coalesce(s.tags->'type:RATP', case when s.railway='station' then '5'  when s.railway='halt' then '4' when s.railway='tram_stop' then '3' when s.amenity='bus_station' then '2' when s.amenity='bus_stop' then '1' else '0' end) as prio,
            coalesce(s.tags->'usage','') as usage,
            coalesce(s.ele,s.tags->'ele:local','') as ele
          from planet_osm_point s
          LEFT JOIN planet_osm_rels r ON (r.parts @> ARRAY[s.osm_id] AND r.members @> ARRAY['n' || s.osm_id])
          LEFT JOIN planet_osm_line l ON (l.osm_id=-r.id AND l.route is not null)
          where s.way && !bbox!
            and s.railway in ('station','halt')
          order by prio desc, l_operator desc
        ) as stations GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) as s
      simplify_geometries: 'true'


  - id: stations
    class: stations
    <<: *extents
    zoom_min: 15
    properties:
      minzoom: 15
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* stations */ (
          select s.way as way,
            coalesce(s.tags->'name:fr',s.tags->'int_name',s.tags->'int_name',s.name) as name,
            s.railway as railway,
            s.aerialway as aerialway,
            s.disused as disused,
            case when s.tags->'public_transport'='platform' and s.tags->'bus'='yes' then 'bus_stop' else s.highway end as highway,
            s.amenity as amenity,
            coalesce(s.tags->'type:RATP','') as type_ratp,
            s.operator as operator,
            coalesce(l.operator,'') as l_operator,
            l.route as l_type,
            substring(l.ref,1,1) as l_ref1,
            coalesce(s.tags->'network',l.tags->'network') as network,
            coalesce(s.tags->'type:RATP', case when s.railway='station' then '5'  when s.railway='halt' then '4' when s.railway='tram_stop' then '3' when s.amenity='bus_station' then '2' when s.amenity='bus_stop' then '1' else '0' end) as prio,
            coalesce(s.tags->'usage','') as usage,
            coalesce(s.ele,s.tags->'ele:local','') as ele
          from planet_osm_point s
          LEFT JOIN planet_osm_rels r ON (r.parts @> ARRAY[s.osm_id] AND r.members @> ARRAY['n' || s.osm_id])
          LEFT JOIN planet_osm_line l ON (l.osm_id=-r.id AND l.route is not null)
          where s.way && !bbox!
            and (s.railway in ('station','halt','tram_stop','subway_entrance')
              or s.aerialway='station'
              or (s.amenity='bus_station' and !pixel_width! > 360))
          order by prio desc, l_operator desc
        ) as stations
      simplify_geometries: 'true'


  - id: bus-stops-lz
    <<: *extents
    zoom_min: 16
    zoom_max: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* bus-stops-lz */ (select st_centroid(cluster) as way, ST_NumGeometries(cluster) as count from (select unnest(st_clusterwithin(way,!pixel_width!*20)) as cluster from (select way from planet_osm_point where way && !bbox! and (highway='bus_stop' or (tags->'public_transport'='platform' and tags->'bus'='yes')) UNION select way from planet_osm_polygon where way && !bbox! and (highway='bus_stop' or (tags->'public_transport'='platform' and tags->'bus'='yes'))) as bus) as clusters) as bus_stops_lz"


  - id: bus-stops
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: " /* stations */ (SELECT s.way as way,coalesce(s.tags->'name:fr',s.tags->'int_name',s.tags->'int_name',s.name) as name,s.disused as disused, case when s.tags->'public_transport'='platform' and s.tags->'bus'='yes' then 'bus_stop' else s.highway end as highway, s.amenity as amenity, coalesce(s.tags->'type:RATP','') as type_ratp,  s.operator as operator, coalesce(l.operator,'') as l_operator, substring(l.ref,1,1) as l_ref1, coalesce(s.tags->'network',l.tags->'network') as network  FROM  planet_osm_point s LEFT JOIN planet_osm_rels r ON (r.parts @> ARRAY[s.osm_id] AND r.members @> ARRAY['n' || s.osm_id]) LEFT JOIN planet_osm_line l ON (l.osm_id=-r.id AND l.route is not null)  WHERE s.way && !bbox! and s.highway = 'bus_stop' ORDER BY l_operator desc ) as bus_stops"


  - id: amenity-symbols
    class: symbols
    <<: *extents
    zoom_min: 10
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* amenity-symbols */ (
        SELECT way,
          coalesce(aeroway, military) as aeroway,
          man_made,
          railway,
          "natural",
          power,
          coalesce(power_source, "generator:source") as power_source,
          highway,
          barrier,
          tags->'mountain_pass' as mountain_pass,
          coalesce(tags->'aerodrome', p.military) as aerodrome,
          fr_abbrev(regexp_replace(regexp_replace(coalesce(tags->'name:fr',tags->'int_name',name),'^([Aa]éroport|[Aa]érodrome) ([Ii]nternational )?(d.|de la |de |du |)',''),'^Base [Aa]érienne ','B.A. ')) as nom
        FROM planet_osm_point p
        WHERE (aeroway in ('airport','aerodrome','helipad','military')
          OR military='airfield'
          OR (barrier in ('bollard','gate','lift_gate','block','toll_booth') AND !pixel_width! < 50 /* zoom >= 15 */)
          OR (highway in ('mini_roundabout','gate') AND !pixel_width! < 50)
          OR man_made in ('lighthouse','power_wind','windmill','mast')
          OR power in ('sub_station','substation','plant')
          OR (power='generator' and ("generator:source"='wind' or power_source='wind'))
          OR "natural" in ('peak','volcano','spring','cave_entrance')
          OR tags ? 'mountain_pass'
          OR (railway in ('level_crossing') AND !pixel_width! < 50 /* zoom >= 15 */)
          OR (railway in ('crossing', 'buffer_stop') AND !pixel_width! < 12 /* zoom >= 17 */))
          AND /* poi index */ (coalesce(amenity,aeroway, military,barrier,man_made, railway, "natural", power,shop, tourism, waterway, historic,leisure,highway) is not null or tags ? 'mountain_pass' or tags ? 'emergency' or tags ? 'craft')
        UNION
        SELECT
          way, coalesce(aeroway, military) as aeroway, man_made, railway, "natural", power, coalesce(power_source, "generator:source") as power_source, highway, barrier, tags->'mountain_pass' as mountain_pass, coalesce(tags->'aerodrome', p.military) as aerodrome,
          fr_abbrev(regexp_replace(regexp_replace(coalesce(tags->'name:fr',tags->'int_name',name),'^([Aa]éroport|[Aa]érodrome) ([Ii]nternational )?(d.|de la |de |du |)',''),'^Base [Aa]érienne ','B.A. ')) as nom
        FROM planet_osm_polygon p
        WHERE (aeroway in ('airport','aerodrome','helipad','military')
          OR military='airfield'
          OR barrier in ('bollard','gate','lift_gate','block','toll_booth')
          OR highway in ('mini_roundabout','gate')
          OR man_made in ('lighthouse','power_wind','windmill','mast')
          OR power in ('sub_station','substation','plant')
          OR (power='generator' and ("generator:source"='wind' or power_source='wind'))
          OR "natural" in ('peak','volcano','spring','cave_entrance')
          OR tags ? 'mountain_pass')
          AND way_area > !pixel_width!*!pixel_height!*10
          AND /* poi index */ (coalesce(amenity, aeroway, military,barrier,man_made, railway, "natural", power,shop, tourism, waterway, historic,leisure,highway) is not null or tags ? 'mountain_pass' or tags ? 'emergency' or tags ? 'craft') /* index */
        ) as amenity_symbols
      simplify_geometries: 'true'


  - id: amenity-points
    class: points
    <<: *extents
    properties:
      minzoom: 14
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* amenity-points */ (
        SELECT way,
          amenity,shop,tourism,highway,man_made,waterway,
          historic,leisure,power,
          operator, access, religion, lock, office,
          p.tags->'craft' as craft, tags->'emergency' as emergency,

          ref, name, fr_abbrev(coalesce(p.tags->'short_name:fr',p.tags->'short_name',p.tags->'alt_name',p.tags->'name:fr',p.name)) as nom,
          coalesce(tags->'indoor',case when to_int(tags->'level')<0 then 'yes'::text when tags->'location'='underground' then 'yes'::text else null end) as indoor,
          to_int(tags->'level') as level, tags->'network' as network,
          tags->'ref:FR:LaPoste' as ref_laposte, 
          coalesce(tags->'conveying', tags->'conveyor_dir') as conveying, tags->'incline' as incline,
          tags->'fuel:lpg' as lpg, tags->'heritage' as heritage,
          coalesce(tags->'post_office:type', tags->'recycling_type', tags->'shelter_type',tags->'information','') as poi_type,
          substring('******',1,to_int(tags->'stars')::integer) as stars,
          tags->'parking' as parking,
          tags->'organic' as organic, 
          
          way_area,
          case when amenity='townhall' then 2  when amenity in ('post_office','courthouse','police','public_building','hospital','clinic') then 1  else 0 end as prio
        FROM planet_osm_polygon p
        WHERE (
          ((!scale_denominator! < 72000) and (coalesce(amenity,tourism) in ('townhall','alpine_hut')))
          OR ((!scale_denominator! < 36000) and (amenity='zoo' or tags->'heritage'='1' or leisure='golf_course'))
          OR ((!scale_denominator! < 18000) and coalesce(amenity,tourism) in ('hospital','clinic','light_house','lock','castle'))
          OR ((!scale_denominator! < 9000
            and coalesce(amenity) in ('post_office','car_sharing','parking','pharmacy','place_of_worship','biergarten'))
          OR ((!scale_denominator! < 4500
            and coalesce(amenity,shop,tourism,highway,man_made,waterway,historic,leisure,power) is not null))
          ) AND way_area > !pixel_width!*!pixel_height!*10)
          AND /* poi index */ (coalesce(amenity,aeroway, military,barrier,man_made, railway, "natural", power,shop, tourism, waterway, historic,leisure,highway) is not null or tags ? 'mountain_pass' or tags ? 'emergency' or tags ? 'craft')
        UNION
        SELECT way,
          amenity,shop,tourism,highway,man_made,waterway,
          historic,leisure,power,
          operator, access, religion, lock, office,
          p.tags->'craft' as craft, tags->'emergency' as emergency,

          ref, name, fr_abbrev(coalesce(p.tags->'short_name:fr',p.tags->'short_name',p.tags->'alt_name',p.tags->'name:fr',p.name)) as nom,
          coalesce(tags->'indoor',case when to_int(tags->'level')<0 then 'yes'::text when tags->'location'='underground' then 'yes'::text else null end) as indoor,
          to_int(tags->'level') as level, tags->'network' as network,
          tags->'ref:FR:LaPoste' as ref_laposte, 
          coalesce(tags->'conveying', tags->'conveyor_dir') as conveying, tags->'incline' as incline,
          tags->'fuel:lpg' as lpg, tags->'heritage' as heritage,
          coalesce(tags->'post_office:type', tags->'recycling_type', tags->'shelter_type',tags->'information','') as poi_type,
          substring('******',1,to_int(tags->'stars')::integer) as stars,
          tags->'parking' as parking,
          tags->'organic' as organic, 
          
          0 as way_area,
          case when amenity='townhall' then 2  when amenity in ('post_office','courthouse','police','public_building','hospital','clinic') then 1  else 0 end as prio
        FROM planet_osm_point p
        WHERE (
          (!scale_denominator! < 72000 /* zoom >= 13 */
            and coalesce(amenity,tourism) in ('townhall','alpine_hut'))
          OR (!scale_denominator! < 36000
            and (amenity='zoo' or tags->'heritage'='1' or leisure='golf_course'))
          OR (!scale_denominator! < 18000
            and coalesce(amenity,tourism) in ('hospital','clinic','light_house','lock','castle'))
          OR (!scale_denominator! < 9000
            and coalesce(amenity) in ('post_office','car_sharing','parking','pharmacy','place_of_worship','biergarten','emergency'))
          OR (!scale_denominator! < 4500
            and coalesce(amenity,shop,tourism,highway,man_made,waterway,historic,leisure,power) is not null)
          )
          AND /* poi index */ (coalesce(amenity,aeroway, military,barrier,man_made, railway, "natural", power,shop, tourism, waterway, historic,leisure,highway) is not null or tags ? 'mountain_pass' or tags ? 'emergency' or tags ? 'craft')
        ORDER BY prio desc, way_area desc ) as points


  - id: entrance
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* entrance */ (
          SELECT
            p.way,
            fr_abbrev(coalesce(p.tags->'short_name:fr',p.tags->'short_name',p.tags->'alt_name',p.tags->'name:fr',p.name)) as nom,
            p.ref,
            coalesce(p.tags->'indoor',case when to_int(p.tags->'level')<0 then 'yes'::text when p.tags->'location'='underground' then 'yes'::text else null end) as indoor,
            to_int(p.tags->'level') as level
          FROM planet_osm_point p
          LEFT JOIN planet_osm_polygon w ON (ST_Intersects(w.way, p.way) AND NOT ST_Covers(w.way, p.way) AND (p.building is not null))
          WHERE w.way && !bbox! AND p.way && !bbox!
            AND p.tags ? 'entrance'
          GROUP BY p.way, p.tags, p.name, p.ref
        ) as entrance


  - id: power-line
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* power-line */ (select way, coalesce(tags->'location','') as location, tags->'line' as line from planet_osm_line where power='line' and coalesce(tags->'line','') not in ('busbar','bay')) as power_line"


  - id: power-minorline
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* power-minorline */ (select way, power as power_type, tags->'location' as location, tags->'line' as line from planet_osm_line where power in ('line','minor_line')) as power_minorline"


  - id: power-towers
    <<: *extents
    zoom_min: 14
    Datasource:
      <<: *osm2pgsql
      table: " /* power-towers */ (select way from planet_osm_point where power='tower') as power_towers"


  - id: power-poles
    <<: *extents
    zoom_min: 16
    Datasource:
      <<: *osm2pgsql
      table: " /* power-poles */ (select way from planet_osm_point where power='pole') as power_poles"


  - id: roads-text-ref-low-zoom
    <<: *extents
    zoom_min: 10
    zoom_max: 12
    Datasource:
      <<: *osm2pgsql
      table: " /* roads-text-ref-low-zoom */ (select way,highway,ref, char_length(ref) as length, st_length(way) as way_len, case when highway='motorway' then 0 when highway='trunk' then 2 when highway='primary' then 3 when highway='secondary' then 4 end as prio  from  planet_osm_roads  where way && !bbox! AND highway in ('motorway','trunk','primary','secondary') and osm_id>0  and ref is not null and char_length(ref) between 1 and 8 and st_length(way)>1000 order by prio, way_len desc) as roads"
      simplify_geometries: 'true'


  - id: highway-junctions
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* highway-junctions */ (
          select way,
            ref,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name', tags->'name:fr', name)) as nom,
            coalesce(highway, aeroway) as type
          from planet_osm_point
          where highway='motorway_junction'
            AND /* index poi */ COALESCE(aeroway, military, barrier, man_made, railway, "natural", power, shop, tourism, waterway, historic, leisure, highway) IS NOT NULL OR tags ? 'mountain_pass'::text
        ) as junctions


  - id: crossroad_names
    <<: *extents
    zoom_min: 15
    Datasource:
      <<: *osm2pgsql
      table: " /* crossroad_names */ (select way,name,fr_abbrev(coalesce(p.tags->'short_name:fr',p.tags->'short_name',p.tags->'alt_name',p.tags->'name:fr',p.name)) as nom, highway from planet_osm_point p where (junction = 'yes' or highway='traffic_signals') AND name is not null) as crossroad_names"


  - id: roads-text-name
    <<: *extents
    zoom_min: 13
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* roads-text-name */ (
          SELECT *,
            coalesce(short_name, abrev_prenoms, w.name) as nom
          FROM (
            SELECT st_linemerge(st_collect(way)) as way,
              highway,
              ways.name,
              short_name,
              railway,
              tunnel,
              junction,
              sum(way_len) as way_len
            FROM (
              SELECT way,
                st_length(way) as way_len,
                highway,
                coalesce(tags->'name:fr',case
                  when name ~ '[A-Za-z]' then name
                  else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
                coalesce(tags->'short_name:fr',tags->'short_name') as short_name,
                railway,
                tunnel,
                junction,
                oneway
              FROM planet_osm_line p
              WHERE way && !bbox!
                AND route IS NULL
                AND waterway IS NULL
                AND leisure IS NULL
                AND landuse IS NULL
                AND name is not null
                AND NOT tags ? 'land_area'
                AND (position('GR' in name)!=1 AND position('G.R' in name) !=1 AND position('G R ' in name) !=1)
                AND coalesce(highway, railway, aeroway, man_made) IS NOT NULL
              ) as ways
            GROUP BY highway, name, short_name, railway, tunnel, junction, oneway
            HAVING sum(way_len)> 32 * !pixel_width!
          ) as w
          LEFT JOIN abrev a ON (a.long_name = w.name)
          ORDER BY way_len
        ) as roads
      simplify_geometries: 'true'


  - id: roads-text-ref
    <<: *extents
    zoom_min: 13
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* roads-text-ref */ (
          SELECT st_linemerge(st_collect(way)) as way,
            junction,
            coalesce(highway,aeroway) as highway,
            ref,
            char_length(ref) as length
          FROM planet_osm_line
          WHERE way && !bbox! AND ST_length(way) > !pixel_width!
            AND (highway is not null
              OR aeroway is not null)
            AND ref is not null
            AND ref !~ '^(GR|G.R )'
            AND char_length(ref) between 1 and 8
            AND (tunnel is null and covered is null
              OR coalesce(tunnel,covered,'') not in ('yes','true','1','building_passage'))
          GROUP BY ref,highway,aeroway,junction
        ) as roads_text_ref
      simplify_geometries: 'true'


  - id: area-text
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: " /* area-text */ (SELECT  p.osm_id, coalesce(p.leisure, p.boundary, p.landuse, p.natural, p.amenity, p.building, p.shop) as kind, p.tags->'heritage' as heritage, p.way_area, round(p.way_area::numeric / (!pixel_width!*!pixel_height!)) as area, ST_Centroid(p.way) as way, coalesce(p.tags->'name:fr',p.name) as name, fr_abbrev(coalesce(p.tags->'short_name:fr',p.tags->'short_name',p.tags->'name:fr',p.name)) as nom  FROM  planet_osm_polygon p  LEFT JOIN  planet_osm_point n ON (n.place is not null and n.name=p.name and n.way && !bbox! and n.way && p.way)  WHERE  p.way && !bbox! AND n.place is null AND COALESCE(p.name, p.tags -> 'name:fr'::text, p.tags -> 'int_name'::text, p.tags -> 'stars'::text, p.tags -> 'ele'::text, p.tags -> 'ele:local'::text, p.ref, p.tags -> 'school:FR'::text) IS NOT NULL AND coalesce(p.waterway, p.water, p.aeroway, p.boundary, p.landuse, p.\"natural\", p.building, p.leisure,p.aeroway,p.amenity,p.tourism,'') NOT IN ('','river','riverbank','aerodrome') AND coalesce(p.power, p.place, p.shop) IS null AND coalesce(p.boundary,p.amenity,p.tourism,'') in ('','protected_area','national_park','maritime','school','kindergarten','townhall','public_building','hospital','clinic','courthouse','place_of_worship','recycling','zoo') and (p.admin_level is null or to_int(p.admin_level)>=8) and p.way_area / (!pixel_width!*!pixel_height!) > 1000  ORDER BY  p.way_area DESC) as text"
      simplify_geometries: 'true'


  - id: text-poly-lz
    <<: *extents
    zoom_min: 12
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* text-poly-lz */ (
          SELECT way,
            osm_id,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name',tags->'alt_name',tags->'name:fr',tags->'int_name',name)) as nom,
            leisure, "natural", place, tourism, coalesce(aeroway,military) as aeroway,
            coalesce(tags->'ele',tags->'ele:local','') as ele,
            tags->'mountain_pass' as mountain_pass,
            way_area,
            power
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND COALESCE(name, tags -> 'name:fr'::text, tags -> 'int_name'::text, tags -> 'stars'::text, tags -> 'ele'::text, tags -> 'ele:local'::text, ref, tags -> 'school:FR'::text) IS NOT NULL
            and (leisure = 'golf_course'
              or place='island'
              or military='danger_area'
              or aeroway = 'danger_area'
              or "natural" in ('saddle','peak','volcano')
              or tourism in ('zoo','theme_park')
              or power in ('generator','substation','sub_station','plant'))
            and way_area > !pixel_width!*!pixel_height!*100
          UNION
          SELECT way,
            osm_id,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name',tags->'alt_name',tags->'name:fr',tags->'int_name',name)) as nom,
            leisure, "natural", place, tourism, coalesce(aeroway,military) as aeroway,
            coalesce(tags->'ele',tags->'ele:local','') as ele,
            tags->'mountain_pass' as mountain_pass,
            0 as way_area,
            power
          FROM planet_osm_point
          WHERE way && !bbox!
            AND name is not null
            and (leisure = 'golf_course'
              or place='island'
              or military='danger_area'
              or aeroway = 'danger_area'
              or "natural" in ('saddle','peak','volcano')
              or tourism in ('zoo','theme_park')
              or power in ('generator','substation','sub_station','plant'))
          order by way_area desc
        ) as text
      simplify_geometries: 'true'


  - id: text-poly
    <<: *extents
    zoom_min: 15
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* text-poly */ (
          SELECT way,
            osm_id,
            tags->'heritage' as heritage,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            case when amenity='townhall' then 2 when amenity in ('post_office','courthouse','police','public_building') then 1  else 0 end as prio,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name',tags->'alt_name',tags->'name:fr',tags->'int_name',name)) as nom,
            aeroway,
            shop,
            access,
            amenity,
            leisure,
            landuse,
            man_made,
            "natural",
            place,
            tourism,
            substring('******',1,to_int(tags->'stars')::integer) as stars,coalesce(tags->'ele',tags->'ele:local','') as ele,
            tags->'mountain_pass' as mountain_pass,
            ref,
            military,
            waterway,
            historic,
            'no'::text as point,
            way_area,
            NULL as way_len,
            replace(replace(replace(replace(tags->'school:FR','maternelle','École Mat.'),'élémentaire','École'),'primaire','École'),'secondaire','Collège-Lycée') as ecole,
            power,
            office,
            tags->'craft' as craft
          FROM planet_osm_polygon
          WHERE way && !bbox!
            AND coalesce(name, tags->'name:fr',tags->'int_name', tags->'stars', tags->'ele', tags->'ele:local', ref,tags->'school:FR') is not null
            and (amenity is not null
              and amenity not in ('townhall','school')
              or shop is not null
              or leisure is not null
              or landuse is not null
              or tourism is not null
              or office is not null
              or tags ? 'craft'
              or ("natural" is not null AND tags->'water' != 'river')
              or man_made in ('lighthouse','windmill')
              or place='island'
              or military='danger_area'
              or historic in ('memorial','archaeological_site','castle')
              or aeroway='gate'
              or power in ('generator','substation','sub_station','plant'))
            AND way_area > !pixel_width!*!pixel_height!*10
          UNION
          SELECT way,
            osm_id,
            tags->'heritage' as heritage,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            case when amenity='townhall' then 2  when amenity in ('post_office','courthouse','police','public_building') then 1  else 0 end as prio,
            fr_abbrev(coalesce(tags->'short_name:fr',tags->'short_name',tags->'alt_name',tags->'name:fr',tags->'int_name',name)) as nom,
            aeroway,shop,access,amenity,leisure,landuse,man_made,"natural",place,tourism,
            substring('******',1,to_int(tags->'stars')::integer) as stars,
            coalesce(ele,tags->'ele:local','') as ele,
            tags->'mountain_pass' as mountain_pass,
            ref, military, waterway, historic,
            'yes'::text as point,
            0 as way_area,
            NULL as way_len,
            replace(replace(replace(replace(tags->'school:FR','maternelle','École Mat.'),'élémentaire','École'),'primaire','École'),'secondaire','Collège-Lycée') as ecole,
            power, office, tags->'craft' as craft
          FROM planet_osm_point
          WHERE way && !bbox!
            AND coalesce(name, tags->'name:fr',tags->'int_name', tags->'stars', ele, tags->'ele:local', ref,tags->'school:FR') is not null
            and ((amenity is not null and amenity not in ('townhall'))
              or shop is not null
              or leisure is not null
              or landuse is not null
              or tourism is not null
              or "natural" is not null
              or office is not null
              or tags ? 'craft'
              or man_made in ('lighthouse','windmill')
              or place='island'
              or military='danger_area'
              or historic in ('memorial','archaeological_site','castle')
              or aeroway='gate'
              or tags->'mountain_pass'='yes'
              or power in ('generator','substation','sub_station','plant'))
          order by prio desc,way_area desc
        ) as text
      simplify_geometries: 'true'


  - id: admin-boundaries-text
    <<: *extents
    zoom_min: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* admin-boundaries-text */ (
        SELECT
          ST_Boundary((ST_Dumprings(ST_ForceRHR((ST_Dump(way)).geom))).geom) as way,
          to_int(admin_level) as admin_level,
          coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
          tags->'ref:INSEE' as insee,
          fr_abbrev(coalesce(tags->'name:fr',tags->'int_name',name)) as nom
        FROM planet_osm_polygon p
        WHERE ST_Intersects(p.way, !bbox!)
          AND not ST_Covers(p.way,!bbox!)
          AND boundary='administrative'
          AND admin_level is not NULL
          AND ST_Area(way) > !pixel_width! * !pixel_height! * 100
        ORDER BY 2 desc
        ) as admin_boundaries_text
      simplify_geometries: 'true'


  - id: placenames-small-lz
    <<: *extents
    zoom_min: 6
    zoom_max: 11
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* placenames-small-lz */ (
          SELECT ST_Snaptogrid(way,!pixel_width!) as way,
            place,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            fr_abbrev(coalesce(p.tags->'short_name:fr',p.tags->'short_name',p.tags->'name:fr',p.name)) as nom,
            to_int(population) as pop
          FROM  planet_osm_point p
          WHERE  way && !bbox!
            and place is not null
            and place in ('suburb','neighbourhood','quater','village','large_village','hamlet','locality','isolated_dwelling','farm')
          order by pop desc, osm_id
        ) as placenames


  - id: interpolation
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: ' /* interpolation */ (select way from planet_osm_line where "addr:interpolation" is not null) as interpolation'


  - id: housenumbers
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* housenumbers */ (
        SELECT
          way,
          "addr:housenumber",
          null as entrance
        FROM
          planet_osm_polygon
        WHERE
          "addr:housenumber" is not null
          and building is not null
        UNION
        SELECT
          way,
          "addr:housenumber",
          tags->'entrance' as entrance
        FROM
          planet_osm_point
        WHERE
          "addr:housenumber" is not null
        ) as housenumbers


  - id: housenames
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* housenames */ (
        select way,
          "addr:housename"
        from planet_osm_polygon
        where "addr:housename" is not null
          and building is not null
        union
        select way,
          "addr:housename"
        from planet_osm_point
        where "addr:housename" is not null
        ) as housenames


  - id: parks
    <<: *extents
    zoom_min: 7
    Datasource:
      <<: *osm2pgsql
      table: >-
        /* parks */ (
          select way,
            way_area,
            coalesce(tags->'name:fr',case
              when name ~ '[A-Za-z]' then name
              else coalesce(tags->'int_name',tags->'name:en',tags->'name:es',tags->'name:de',tags->'int_name',name) end) as name,
            coalesce(boundary, tourism) as park
          from planet_osm_polygon
          where (boundary='national_park' or tourism='theme_park')
            AND way_area > !pixel_width!*!pixel_height!*100
        ) as boundary
      simplify_geometries: 'true'


  - id: parking-handi
    <<: *extents
    zoom_min: 17
    Datasource:
      <<: *osm2pgsql
      table: " /* parking-handi */ (SELECT way,0 as way_area, to_int(tags->'capacity:disabled') as capacity FROM planet_osm_point WHERE amenity='parking_space' AND (tags->'wheelchair'='yes' or (tags ? 'capacity:disabled' and tags->'capacity:disabled' not in ('0','no'))) UNION SELECT way, way_area, to_int(tags->'capacity:disabled') as capacity FROM planet_osm_polygon WHERE amenity='parking_space' AND (tags->'wheelchair'='yes' or (tags ? 'capacity:disabled' and tags->'capacity:disabled' not in ('0','no')))) as park"
      simplify_geometries: 'true'


  - id: pmr
    <<: *extents
    zoom_min: 20
    Datasource:
      <<: *osm2pgsql
      table: " /* pmr */ (SELECT way,highway, coalesce(tags->'conveying',tags->'conveyor_dir') as conveying, tags->'incline' as incline, tags->'wheelchair' as wheelchair, tags->'ramp:wheelchair' as ramp_wheelchair FROM planet_osm_point WHERE (highway in ('steps','footway','elevator','conveyor') or tags ? 'ramp:wheelchair')  and way && !bbox!   UNION    SELECT ST_LineInterpolatePoint(way, 0.5) as way, highway, coalesce(tags->'conveying',tags->'conveyor_dir') as conveying, tags->'incline' as incline, tags->'wheelchair' as wheelchair, tags->'ramp:wheelchair' as ramp_wheelchair FROM planet_osm_line WHERE (highway in ('steps','footway','elevator','conveyor') or tags ? 'ramp:wheelchair')  and way && !bbox! UNION    SELECT way,highway, coalesce(tags->'conveying',tags->'conveyor_dir') as conveying, tags->'incline' as incline, tags->'wheelchair' as wheelchair, tags->'ramp:wheelchair' as ramp_wheelchair FROM planet_osm_polygon WHERE (highway in ('steps','footway','elevator','conveyor') or tags ? 'ramp:wheelchair') and way && !bbox! ) as pmr"
      simplify_geometries: 'true'
